# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4.1-fpm

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      - run: sudo apt-get install -y libpng-dev libjpeg62-turbo-dev
      - run: sudo docker-php-ext-configure gd --with-jpeg 
      - run: sudo docker-php-ext-install -j$(nproc) gd
      
      - run: 
          name: base64 decode env file
          command: echo $ENV_FILE | base64 -di > ./server/laravel/.env

      # prepare the database
      - run: touch ./server/laravel/storage/testing.sqlite
      - run: php ./server/laravel/artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      - run: ./server/laravel/vendor/bin/phpunit --configuration=./server/laravel/phpunit.xml --testdox 
  
  build_images:
    docker:
      - image: circleci/php:7.4.1-fpm
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: composer install
          command: composer install -n --prefer-dist --working-dir=./server/laravel
      - run: 
          name: base64 decode env file
          command: echo $ENV_FILE | base64 -di > ./server/laravel/.env
      - run:
          name: create config cache
          command: php ./server/laravel/artisan config:cache

      - run:
          name: build container
          command: |
            docker build -t ${ECR_DOMAIN_APP}:$CIRCLE_SHA1 -t ${ECR_DOMAIN_APP}:latest --build-arg TZ=${TZ} -f ./docker/php/Dockerfile .

      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: push docker image # ECRにコンテナイメージをpush
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION}| docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker push ${ECR_DOMAIN_APP}:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN_APP}:latest

  deploy:
    docker:
      - image: circleci/python:3.8.5
        environment:
          AWS_PAGER: ""
    steps:
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
         name: download jq # JSONファイルを簡単に操作するためにjqをインストール
         command: |
           wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
           mv jq-linux64 jq

      - run:
          name: login ecr
          command: aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com

      - run:
          name: deploy # 新しいタスク定義ファイルを作成し、ECSに反映させる
          command: |
            aws ecs describe-task-definition --task-definition dotstudio | jq '.taskDefinition | { containerDefinitions: .containerDefinitions }' > dotstudio_task_definitions.json
            aws ecs register-task-definition --family dotstudio --requires-compatibilities FARGATE --network-mode awsvpc --task-role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/dotstudio-role-ecs-task-execution --execution-role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/dotstudio-role-ecs-task-execution --cpu 256 --memory 512 --cli-input-json file://dotstudio_task_definitions.json

            aws ecs update-service --cluster dotstudio-cluster --service dotstudio --task-definition dotstudio 


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - build_images:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build_images
          filters:
            branches:
              only: master